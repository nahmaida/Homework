#include <iostream>
#include <vector>
using namespace std;
// 1. Добавление элементов в вектор:
//    Попросите пользователя ввести несколько чисел и добавьте их в вектор с
//    помощью метода push_back(). *Подсказка: Используйте цикл для чтения чисел
//    и добавления их в вектор.*

// 2. Вывод элементов вектора:
//    Выведите все элементы вектора, используя цикл.
//    *Подсказка: Используйте цикл for или for-each для итерации по вектору и
//    вывода каждого элемента.*

// 3. Поиск максимального и минимального элемента:
//    Найдите максимальный и минимальный элементы в векторе.
//    *Подсказка: Используйте функции max_element() и min_element() из
//    библиотеки <algorithm>.*

// 4. Сортировка элементов вектора:
//    Отсортируйте элементы вектора в порядке возрастания, убывания.
//    *Подсказка: Используйте функцию sort() из библиотеки <algorithm>.*

// 5. Удаление дубликатов из вектора:
//    Удалите все дубликаты из отсортированного вектора.
//    *Подсказка: Используйте метод unique() из библиотеки <algorithm>, а затем
//    метод erase() для удаления лишних элементов.*

// 6. Объединение двух векторов:
//    Создайте два вектора, заполните их числами и объедините их в один вектор.
//    *Подсказка: Используйте метод insert() для добавления элементов одного
//    вектора в конец другого.*

// 7. Разделение вектора на четные и нечетные числа:
//    Создайте вектор с числами и разделите его на два вектора: один с четными
//    числами, другой с нечетными. *Подсказка: Используйте цикл для проверки
//    каждого элемента на четность и добавления его в соответствующий вектор.*

// 8. Поиск подпоследовательности в векторе:
//    Попросите пользователя ввести подпоследовательность и проверьте,
//    содержится ли она в основном векторе. *Подсказка: Используйте функцию
//    search() из библиотеки <algorithm> для поиска подпоследовательности.*

// 9. Циклический сдвиг элементов вектора:
//    Реализуйте циклический сдвиг элементов вектора на заданное количество
//    позиций вправо. *Подсказка: Используйте функцию rotate() из библиотеки
//    <algorithm> для сдвига элементов.*

// 10. Транспонирование матрицы:
//     Создайте матрицу как вектор векторов и реализуйте ее транспонирование.
//     *Подсказка: Создайте новую матрицу того же размера и заполните ее
//     элементами исходной матрицы, меняя местами строки и столбцы.*

void add_numbers(vector<int> list) {
    for (int num = 1; num != 0;) {
        cout << ">> ";
        cin >> num;
        list.push_back(num);
    }
}

int main(int argc, char const *argv[]) {
    vector<int> list = {3, 23};
    add_numbers(list);
    for (int num : list) {
        cout << num << endl;
    }
    return 0;
}
